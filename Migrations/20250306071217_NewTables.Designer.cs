// <auto-generated />
using System;
using ASP.NETCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASP.NETCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306071217_NewTables")]
    partial class NewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ASP.NETCore.Board", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserSerial")
                        .HasColumnType("int");

                    b.HasKey("Serial");

                    b.HasIndex("UserSerial");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("ASP.NETCore.Post", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ReplyingToPostId")
                        .HasColumnType("int");

                    b.Property<int>("ThreadSerial")
                        .HasColumnType("int");

                    b.Property<int>("UserSerial")
                        .HasColumnType("int");

                    b.HasKey("Serial");

                    b.HasIndex("ThreadSerial");

                    b.HasIndex("UserSerial");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASP.NETCore.Thread", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardSerial")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserSerial")
                        .HasColumnType("int");

                    b.HasKey("Serial");

                    b.HasIndex("BoardSerial");

                    b.HasIndex("UserSerial");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("ASP.NETCore.User", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rep")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Serial");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ASP.NETCore.Board", b =>
                {
                    b.HasOne("ASP.NETCore.User", "User")
                        .WithMany("Boards")
                        .HasForeignKey("UserSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP.NETCore.Post", b =>
                {
                    b.HasOne("ASP.NETCore.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NETCore.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP.NETCore.Thread", b =>
                {
                    b.HasOne("ASP.NETCore.Board", "Board")
                        .WithMany("Threads")
                        .HasForeignKey("BoardSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NETCore.User", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP.NETCore.Board", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("ASP.NETCore.Thread", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ASP.NETCore.User", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Posts");

                    b.Navigation("Threads");
                });
#pragma warning restore 612, 618
        }
    }
}
